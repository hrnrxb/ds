class Queue:
    def __init__(self, max_size):
        self.max_size = max_size
        self.Q = [0] * max_size
        self.num = 0
        self.first = 0
        
    def enqueue(self, item):
        if self.num >= self.max_size:
            raise Exception("Queue overflow")
        self.Q[(self.num + self.first) % self.max_size] = item
        self.num += 1
        
    def dequeue(self):
        if self.num == 0:
            raise Exception("Queue empty")
        item = self.Q[self.first]
        self.first = (self.first + 1) % self.max_size
        self.num -= 1
        return item
    
    def front(self):
        if self.num == 0:
            raise Exception("Queue empty")
        return self.Q[self.first]
    
    def is_empty(self):
        return self.num == 0
    
    def size(self):
        return self.num
    
    def is_full(self):
        return self.num >= self.max_size
    
    
###------------------------------------------------------------------------------------------------------------------------------------------------------------------------------###    
     ### problem : try to implement a way to achieve the i-th element of the Queue ###
     
    def get_element(self, i):
        if i >= self.num or i < 0 :
            raise IndexError("The following index is out of range")
        return self.Q[(self.first + i) % self.max_size]  # We add i to the index of first element to locate the i-th element, moving forward in the queue by i positions from the first element:)

###------------------------------------------------------------------------------------------------------------------------------------------------------------------------------###  


# Example
q = Queue(10) # (front of queue)[](back of queue)
q.enqueue("ra'na") # ["ra'na"]
q.enqueue("vez") # ["ra'na", "vez"]
q.enqueue("Arya") # ["ra'na", "vez", "Arya"]
print("Queue size is:", q.size())
print(q.dequeue(), "left the queue.") # ["vez", "A
print(q.get_element(0))
